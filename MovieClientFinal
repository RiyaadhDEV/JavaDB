/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package movie;

/**
 *
 * @author 215167023
 */

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author BURGERR
 */
public class ClientGUI  extends JFrame  {
    private static ObjectInputStream in;
    private static ObjectOutputStream out;
    private static Socket socket;

    private JPanel panelNorth;
    private JPanel panelCenter, panelCenter1, panelCenter2, inputPanel;
    private JPanel panelSouth;

    private static JTextField txtTitleField;
    private static JTextField txtDirectorField;
    private static JTextArea recordsTextArea;
    private static JButton exitButton;
    private static Object recievedObject;
    
    private JLabel lblHeading;
    private JLabel lblTitle;
    private JLabel lblDirector;           
    private JLabel lblGenre;
    private JComboBox cboGenre;
    
    private JButton btnAdd, btnRetrieve, btnExit, btnSearch;
    private Font ft1, ft2, ft3;
       
    public ClientGUI() {
     
        
        panelNorth = new JPanel();
        panelCenter = new JPanel();
        panelCenter1 = new JPanel();
        panelCenter2 = new JPanel();
        panelSouth = new JPanel();
        inputPanel = new JPanel();
        lblHeading = new JLabel("Movie Inventory");

        lblGenre = new JLabel("Genre: ");
        cboGenre = new JComboBox<>(new String[]{"Select", "Comedy", "Action", "Horror", "Romance", "Sci-Fi", "Thriller", "Drama"});      
        btnAdd = new JButton("Add");
        btnRetrieve = new JButton("Retrieve");
        btnSearch = new JButton("Search");
        btnExit = new JButton("Exit");
        
        ft1 = new Font("Arial", Font.BOLD, 32);
        ft2 = new Font("Arial", Font.PLAIN, 22);
        ft3 = new Font("Arial", Font.PLAIN, 24);
    }
    
    public void setGUI() {
        try {
            socket = new Socket("127.0.0.1",12345);
        } catch (IOException ioe) {
            System.out.println("IO Exception " + ioe.getMessage());
        }
           try {
      out = new ObjectOutputStream(socket.getOutputStream());
            out.flush();
            in = new ObjectInputStream(socket.getInputStream());
        } catch (IOException ioe) {
            System.out.println("Exception in getStreams()" + ioe.getMessage());
        }
    
        panelNorth.setLayout(new FlowLayout());
        panelCenter.setLayout(new GridLayout(3, 1));
        panelSouth.setLayout(new GridLayout(1, 4));
        panelCenter1.setLayout(new FlowLayout());
        panelCenter2.setLayout(new FlowLayout());
        
        panelNorth.add(lblHeading);
        lblHeading.setFont(ft1);
        lblHeading.setForeground(Color.yellow);
        panelNorth.setBackground(new Color(0, 106, 255));
        
        lblGenre.setFont(ft2);
        lblGenre.setHorizontalAlignment(JLabel.RIGHT);
        cboGenre.setFont(ft2);
        recordsTextArea = new JTextArea(10,40);
        recordsTextArea.setEditable(false);
        recordsTextArea.setFont(ft2);
        panelCenter1.add(lblGenre);
        panelCenter1.add(cboGenre);
        
        inputPanel.setLayout(new GridLayout(2, 2));        
        lblTitle = new JLabel("Title:");
        lblTitle.setFont(ft2);
        inputPanel.add(lblTitle);
        txtTitleField = new JTextField();
        txtTitleField.setFont(ft2);
        inputPanel.add(txtTitleField);
        lblDirector = new JLabel("Director:");
        lblDirector.setFont(ft2);
        inputPanel.add(lblDirector);
        txtDirectorField = new JTextField();
        txtDirectorField.setFont(ft2);
        inputPanel.add(txtDirectorField);             
        
        panelCenter2.add(new JScrollPane(recordsTextArea), BorderLayout.SOUTH);       
        panelCenter2.setBackground(new Color(36, 145, 255));
        
        panelCenter.add(panelCenter1);
        panelCenter.add(inputPanel);
        panelCenter.add(panelCenter2);
        
        btnAdd.setFont(ft3);
        btnRetrieve.setFont(ft3);
        btnSearch.setFont(ft3);
        btnExit.setFont(ft3);
        panelSouth.add(btnAdd);
        panelSouth.add(btnRetrieve);
        panelSouth.add(btnSearch);
        panelSouth.add(btnExit);
        
        this.add(panelNorth, BorderLayout.NORTH);
        this.add(panelCenter, BorderLayout.CENTER);
        this.add(panelSouth, BorderLayout.SOUTH);
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
       
      /*  btnAdd.addActionListener(this);
        btnRetrieve.addActionListener(this);
        btnSearch.addActionListener(this);
        btnExit.addActionListener(this);
*/        
        this.setSize(350, 350);
        this.pack();
        this.setVisible(true);
        this.setLocationRelativeTo(null);
        
        
        
        
        
         btnAdd.addActionListener(new ActionListener() {
         public void actionPerformed(ActionEvent e) {
             
           String movieT =  txtTitleField.getText();
           String movieD = txtDirectorField.getText();
           String genre = cboGenre.getSelectedItem().toString();
           
      
           
           Movie m = new Movie(movieT,movieD,genre);
           
           try{
           out.writeObject(m);
            } catch(IOException f){
            System.out.println("Error in sending add client");
        }
    
    }});
          
            btnRetrieve.addActionListener(new ActionListener() {
         public void actionPerformed(ActionEvent e) {
             try{
             out.writeObject("RETRIEVE");
             out.flush();
             
             ArrayList <Movie>  retriever = new ArrayList<>();
             
            recievedObject =(ArrayList)in.readObject();
            
             
             
             retriever = (ArrayList)recievedObject;
             
                        
               
             
             for(int i = 0; i<retriever.size();i++){
                 recordsTextArea.append(retriever.get(i).getMovieTitle()+ " " + retriever.get(i).getDirectorTitle()+ " " + retriever.get(i).getMovieGenre()+ "\n");}
             } catch(IOException f){
            System.out.println("Error in sending add client");
        } catch(ClassNotFoundException f){
            
             System.out.println("Error in sending add client");
                
                }
             
        
    
    
    }});
            
              btnExit.addActionListener(new ActionListener() {
         public void actionPerformed(ActionEvent e) {
             try{
             String exit = "EXIT";
             out.writeObject(exit);
             System.out.println("Exit sent");
             
             recievedObject =(String)in.readObject();
             System.out.println("read in exit");
             
             out.close();
            in.close();
            socket.close();
            System.exit(0);
             
             
             
             
}catch(IOException i){
                 System.out.println("error in reading");
             }catch(ClassNotFoundException q){
                 System.out.println("error in reading");
             }
             
    
    
    }});
              
                btnSearch.addActionListener(new ActionListener() {
         public void actionPerformed(ActionEvent e) {
              String id = cboGenre.getSelectedItem().toString();
             
             String identifier = "#1";
             try{
             out.writeObject(id+" "+identifier);
              System.out.println("sent");
             }catch(IOException k){
                 System.out.println("error in combo");
             }
             try{
             recievedObject = (ArrayList)in.readObject();
              System.out.println("recieved");
             }catch(IOException i){
                 System.out.println("error in reading");
             }catch(ClassNotFoundException q){
                 System.out.println("error in reading");
             }
             
             ArrayList <Movie>  retrievers = new ArrayList<>();
             ArrayList <Movie>  datas = new ArrayList<>();
             
             retrievers = (ArrayList)recievedObject;
             
             
             
             for(int i = 0; i<retrievers.size();i++){
             if(retrievers.get(i).getMovieGenre().equals(id)){
             datas.add(retrievers.get(i)); 
              System.out.println(datas);
             }}
             
              System.out.println("Condition True");
             
             
             ArrayList<Movie> moviesclonerss = (ArrayList)datas.clone();
      
        for(int i = 0; i<moviesclonerss.size(); i++)
        {
           String userData = moviesclonerss.toString();
           System.out.println(userData);
        recordsTextArea.append(moviesclonerss.get(i).getMovieTitle()+ " " + moviesclonerss.get(i).getDirectorTitle()+ " " + moviesclonerss.get(i).getMovieGenre()+ "\n");
        System.out.println(moviesclonerss.get(i));}
                    
        }

    
    
    });
    }
    public static void main(String[] args) {
        ClientGUI t = new ClientGUI();
        t.setGUI();
    }
    }
   
   

